% Absolute error correction
% Predicts gaussian position based on initial fit
% Based on calMain Phases 1,2,5a
% Calculates deviation from modeled frame. Store point pairs, Int and Err,
% for each pixel

%clear all
%close all

%addpath(genpath([homePath(1:end-11) '\NewCodes']));
addpath(genpath('C:\Users\Rian\Documents\GitHub\IDS_RIAN'));
addpath(genpath('C:\Users\Rian\Dropbox\IDS_IDK'));

%function [Int,Err] = absError(motorCalShot,trimTime,binChanMotor,xWing,oldFileType,param)
% Predefine variables
%motorCalShot = 13053104;
%trimTime = [];[1:22]';
%binChanMotor = 166;
xWing = 2;
oldFileType=1;
channel = 30;
% Phase 1,2
shot1 = 161017001;13053101;
shot2 = 161017002;13053102;
chanNums = [4,6:33,40:69];%missing three from both ends on both; [1:4, 6:72]; % Nothing wrong with 54, if lens is removed durring calibration
firstCenter = [22,63];[37,55]; % Center position of first channel, [real, wavelength]
lastCenter = [291,66];[349,55]; % Center position of last channel, [real, wavelength]
brightWing = 10;5; % number of pixels in wavelength space for Gaussian fitting domain
force = [23]; % force finding channel(s) at specific x location(s)
remove = [];
% Phase 5
shot3 = 161017003;13053103; % Motor Calibration Shot
shot4 = 161017004;13053104; % Optional second motor calibration shot
motorSpeed = 0.0509; % [nm per second]
trim5 = [1:2:180];[1:22]; % Trim calibration movie to just bright line
trim = [1:180];% using full calibration unnecessary for fits
tOffset = [1,100];

%% Load Data
% calMain Phases 1-2
%[data, X, Y, n_pix, n_chan] = calSVD(shot1, shot2);
%PEAKS = fitAllChans(data, chanNums, firstCenter, lastCenter, brightWing, [], force, remove);
% Fit each peak to 2D Gaussian individually
%[PEAKS, ~, ~, ~] = calGauss2D(PEAKS, data, brightWing, xWing, []);
%% Fit Gaussians
% calMain Phase 5
[~,par,data] = fitMotor(shot3, shot4, PEAKS, motorSpeed, brightWing, xWing,trim5,tOffset);

%% Calculate slope
% calculate 1st order polynomial fit of all parmeters
parSlope = zeros(length(chanNums),6,2);
for n = 1:length(chanNums)
    for i = 1:6
        [parSlope(n,i,:),~] = polyfit(trim5',par(:,n,i),1); % fit param vs timepoint
    end
end

% Visualize the parameters
figure;
labels={'Volume','X_0','Y_0','\sigma_X','\sigma_Y','Offset'};
for i = 1:6
subplot(2,3,i);
plot(trim5,par(:,:,i),'*');
hold on; plot(trim5.*mean(parSlope(:,i,1)) + mean(parSlope(:,i,2)),'-r');
set(gca,'fontsize',12);set(gca,'fontweight','bold');
title(['(' num2str(mean(parSlope(:,i,1))) '\pm' num2str(std(parSlope(:,i,1)))...
    ')x + ' '(' num2str(mean(parSlope(:,i,2))) '\pm' num2str(std(parSlope(:,i,2))) ')']);
grid on;
xlabel([labels{i}]);
end


 %% Apply static calibration
 
 [X, Y] = meshgrid(1:size(data,3), 1:size(data,2));
 x(:, 1) = X(:);
x(:, 2) = Y(:);
model = zeros(1,6);
Int = zeros(size(data));
Err = zeros(size(data));
 for t = trim % loop over timePoints
     % Model frame for time t
      %modelFrame = zeros(size(data));
     for n = 1:length(chanNums)
         model(:) = [parSlope(n,:,1).*t + parSlope(n,:,2)];% calculate all parameters
         Int(t,:,:) = reshape(singletGauss2D(model, x),96,352)+squeeze(Int(t,:,:));
     end
     Int(t,:,:)=Int(t,:,:)-(length(chanNums)-1)*squeeze(mean(mean(par(:,:,6),1),2));
     Err(t,:,:) = data(t,:,:)-Int(t,:,:);
 end
 
 %% Looking at fitting window
 % First try, gross collection, no specification by pixel
 % Reload data, if modified by trim5
 if ~isequal(trim, trim5)
     [dataUncut,time] = loadCalibMovies(shot3,shot4,tOffset,[]);% no trimming this time
 end
 n=50; % fixed channel, 
 doPlot=0;
 realInt= NaN(length(trim),size(dataUncut,2),xWing*2 +1);
 erroInt= NaN(length(trim),size(dataUncut,2),xWing*2 +1);
 modInt= NaN(length(trim),size(dataUncut,2),xWing*2 +1);
 figure;
 for t = trim
    model(:) = [parSlope(n,:,1).*t + parSlope(n,:,2)];
    ylim = (-brightWing:brightWing) + round(model(3));
    ylim = ylim(ylim>0); % remove lower half
    ylim = ylim(ylim<=size(dataUncut,2)); % uper half
    xlim = (-xWing:xWing)+round(model(2)); % assume no limitations necessary
    % make fake frame
    temp=squeeze(reshape(singletGauss2D(parSlope(n,:,1).*t +parSlope(n,:,2), x),size(dataUncut,2),size(dataUncut,3)));
    realInt(t,ylim,:) = dataUncut(t,ylim,xlim);
    modInt(t,ylim,:) = temp(ylim,xlim);
    erroInt(t,ylim,:) = squeeze(realInt(t,ylim,:)) - squeeze(modInt(t,ylim,:));
    
    % figures
    if doPlot
        subplot(1,2,1); 
        surf(squeeze(realInt(t,ylim,:))); shading interp; view([ 0 90]);
        set(gca,'clim',[50,350]);
        set(gca,'xlim',[1,2*xWing+1]);
        set(gca,'ylim',[1,2*brightWing+1]);
        subplot(1,2,2);
        surf(squeeze(modInt(t,ylim,:))); shading interp; view([ 0 90]);
        set(gca,'clim',[50,300]);
        set(gca,'xlim',[1,2*xWing+1]);
        set(gca,'ylim',[1,2*brightWing+1]);
        pause(.5);
    end
 end
 figure; plot(modInt(:),erroInt(:),'b*');
 grid on;
%end
modPlt = modInt(:,67,3);
modPlt=modPlt(:);
modPlt = modPlt(~isnan(modPlt)); % remove Nans
[I] = find(modPlt<250);
modPlt = modPlt(I);
errPlt=erroInt(:,67,3);
errPlt= errPlt(:);
errPlt = errPlt(~isnan(errPlt));
errPlt = abs(errPlt(I));
F0=fit(modPlt,errPlt,'poly5');
 p11 = predint(F0,modPlt,0.95,'observation','off');
p12 = predint(F0,modPlt,0.95,'observation','on');
p21 = predint(F0,modPlt,0.95,'functional','off');
p22 = predint(F0,modPlt,0.95,'functional','on');F0

figure; plot(F0,modPlt,errPlt); hold on, plot(modPlt,p11,'m*')
set(gca,'ylim',[ 0,100])
grid on; xlabel('Modeled Intensity'); ylabel('Error');
title('Model vs Error, Chan 10, All Pixels Int < 250, 95% Confidence')